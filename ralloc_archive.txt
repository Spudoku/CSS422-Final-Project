;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Kernel Memory Allocation
; TODO: _ralloc
; Parameters:
; R0: size
; R1: left
; R2: right
_ralloc
		PUSH	{lr}		; store link register
		; defining entire
		SUB		R3, R2, R1; int entire = right - left  + mcb_ent_sz;
		LDR		R4, =MCB_ENT_SZ	
		ADD		R3, R3, R4
		
		; defining half
		MOV		R5, #2
		UDIV 	R4, R3, R5		; int half = entire / 2;
		
		; defining midpoint
		ADD		R5, R1, R4		; int midpoint = left + half;
		
		; defining heap_addr
		MOV		R6, #0x0; 	int heap_addr = NULL;
		
		; definining act_entire_size
		LSL		R7, R3, #4 	; int act_entire_size = entire * 16;
		
		; defining act_half_size
		LSL		R8, R4, #4 	; int act_half_size = half * 16;
		
		; TODO: base case for _ralloc
		CMP		R0, R8
		; if size > act_half_size, go to base case(s)
		BHI		_ralloc_base
_ralloc_recurse_left
		; goal: Store heap_addr into R9
		PUSH	{R0-R3}
		;void* heap_addr = _ralloc( size, left, midpoint - mcb_ent_sz );
		LDR		R3, =MCB_ENT_SZ
		SUB		R2, R5, R3 	;midpoint - mcb_ent_sz 
		BL		_ralloc
		MOV		R9, R0		; assigning heap_addr
		POP		{R0-R3}	
		
		CMP		R9, #0
		BEQ		_ralloc_recurse_right
		B		_ralloc_left_good
_ralloc_recurse_right
		; return _ralloc( size, midpoint, right );
		PUSH	{R0-R3}
		MOV		R1, R5
		BL		_ralloc
		MOV		R9, R0
		POP		{R0-R3}
		
		MOV		R0, R9
		POP		{lr}
		BX		lr
		
		
_ralloc_left_good			; aka "left recursion worked so don't bother with base
; TODO: split parent MCB
		
		; return heap_addr
		MOV		R0, R9
		POP		{lr}
		BX		lr

_ralloc_base
		MOV		R0, #0x0	; return null
		POP		{lr}
		BX		lr
		; END ralloc